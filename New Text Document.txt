Here’s **both** as you requested:

---

# **Part 1 – Order & Timeline for Opening Chats**

This is the **sequence you should follow** to build your ERP with AI.

---

## **Phase 1 – Core Foundation**

### **Chat 1 – Authentication Module (Week 1–2)**

Focus:

* Setup Node.js/Express project
* Connect Supabase
* Create login & signup
* Add JWT + role-based access

---

## **Phase 2 – Core Features**

### **Chat 2 – Student Management (Week 3)**

* CRUD APIs for students
* React screens for add/edit/list

### **Chat 3 – Attendance (Week 4)**

* Mark/View attendance
* Attendance dashboard

---

## **Phase 3 – Academic Features**

### **Chat 4 – Exams & Results (Week 5)**

* APIs for exams and results
* React screens for entering and viewing results

---

## **Phase 4 – Admin Features**

### **Chat 5 – Fees & Payments (Week 6)**

* Fees records APIs
* Razorpay (test mode) integration

### **Chat 6 – Announcements/Notifications (Week 7)**

* APIs for announcements
* Real-time updates using Supabase or polling

---

## **Phase 5 – Deployment**

### **Chat 7 – Deployment (Week 8)**

* Deploy backend to Render
* Deploy frontend to Vercel
* Connect with Supabase
* Test live app

---

After this, you’ll have a **working Student ERP MVP**.

---

# **Part 2 – First 30 Prompts for the Authentication Chat**

Open a **new chat**, paste the **Master Context + module prompt**, then use these **in order**.
(You copy-paste each prompt one by one and follow instructions.)

---

### **Prompt 1: Project Setup**

```
Guide me step by step to:
1. Install Node.js and check version
2. Create a folder for my student ERP backend
3. Initialize npm
4. Install express, dotenv, supabase-js, and jsonwebtoken
```

---

### **Prompt 2: Folder Structure**

```
Give me a clean folder structure for my backend (controllers, routes, config, middleware) for an ERP project.
```

---

### **Prompt 3: Basic Express Server**

```
Generate code for index.js to start an Express server with dotenv support on port 5000.
```

---

### **Prompt 4: Supabase Connection**

```
Generate a config file to connect to Supabase using supabase-js. Show me how to store SUPABASE_URL and SUPABASE_KEY in .env.
```

---

### **Prompt 5: Roles Setup**

```
List roles I need for ERP (Admin, Teacher, Student) and how to manage them in Supabase Auth and in my code.
```

---

### **Prompt 6: JWT Utility**

```
Generate a JWT utility file that can sign tokens with userId and role, and verify tokens.
```

---

### **Prompt 7: Signup API**

```
Generate an Express route for /api/auth/signup that:
- Creates a user in Supabase Auth
- Assigns a role (Admin, Teacher, Student)
- Returns a JWT token
```

---

### **Prompt 8: Login API**

```
Generate an Express route for /api/auth/login that:
- Authenticates user with Supabase
- Generates a JWT token
- Returns user data and token
```

---

### **Prompt 9: Middleware for Auth**

```
Generate Express middleware to:
1. Verify JWT
2. Attach userId and role to req.user
```

---

### **Prompt 10: Middleware for Role Access**

```
Generate a middleware function that allows access only for specified roles (example: admin only).
```

---

### **Prompt 11: Protect a Route**

```
Show me how to protect a route /api/test so that only Admins can access it.
```

---

### **Prompt 12: Test in Postman**

```
Give me step-by-step instructions to test signup, login, and protected route in Postman.
```

---

### **Prompt 13: Error Handling**

```
Show me how to create a global error handler middleware in Express.
```

---

### **Prompt 14: Logging**

```
Suggest how to log requests and errors (using morgan or console.log).
```

---

### **Prompt 15: CORS**

```
Generate code to enable CORS so that React frontend can call the backend API.
```

---

### **Prompt 16: Run and Test**

```
How do I run my Express server with nodemon and test the signup and login APIs?
```

---

### **Prompt 17: React Setup**

```
Guide me step by step to set up a React frontend using create-react-app.
```

---

### **Prompt 18: React Folder Structure**

```
Suggest a folder structure for frontend (components, pages, services) for ERP.
```

---

### **Prompt 19: React Login Form**

```
Generate a React login page that collects email and password, calls http://localhost:5000/api/auth/login, and stores JWT in localStorage.
```

---

### **Prompt 20: React Signup Form**

```
Generate a React signup page for Admins to create Teachers and Students, calling /api/auth/signup with role.
```

---

### **Prompt 21: Protected React Route**

```
Show me how to create a PrivateRoute component that checks JWT and redirects to login if not authenticated.
```

---

### **Prompt 22: Dashboard Page**

```
Generate a simple Dashboard page showing logged-in user's role and a logout button.
```

---

### **Prompt 23: Logout Functionality**

```
Show me how to clear JWT from localStorage and redirect to login page.
```

---

### **Prompt 24: API Service File**

```
Generate a React service file api.js to handle all HTTP requests with token in headers automatically.
```

---

### **Prompt 25: Connecting to Backend**

```
Guide me step by step to connect my React app to the backend API using axios.
```

---

### **Prompt 26: Test End to End**

```
Give me steps to test:
- Sign up as Admin
- Log in as Admin
- Access protected page
```

---

### **Prompt 27: Deploy Backend**

```
Guide me step by step to deploy my backend to Render for free.
```

---

### **Prompt 28: Deploy Frontend**

```
Guide me step by step to deploy my React app to Vercel for free and connect it to my backend.
```

---

### **Prompt 29: Secure Keys**

```
Guide me how to use environment variables safely so my Supabase keys are not exposed in frontend.
```

---

### **Prompt 30: Final Test**

```
After deployment, how do I test live signup and login using Postman and browser?
```

---

After these 30 prompts, you’ll have a **working authentication system** connected to Supabase, deployed live.

---

Do you want me to next:

1. Prepare **30 prompts for Student Management module (Chat 2)** as the next batch?
2. Or focus first on **helping you run Chat 1 smoothly by giving an exact folder structure and first commands**?
